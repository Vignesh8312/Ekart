pipeline {
    agent any
    tools {
        maven 'maven3'
        jdk 'jdk17'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        DOCKER_IMAGE = 'vignesh997/ekart:latest'
    }
    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        
        stage('Git checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Vignesh8312/Ekart.git'
            }
        }
        
        stage('compile') {
            steps {
                sh "mvn compile"
            }
        }
        
        stage('Unit test') {
            steps {
                sh "mvn test -DskipTests=true"
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh """
                        $SCANNER_HOME/bin/sonar-scanner \
                            -Dsonar.projectKey=EKART \
                            -Dsonar.projectName=EKART \
                            -Dsonar.java.binaries=.
                    """
                }
            }
        }
        
        stage('owasp dependency check') {
            steps {
                dependencyCheck additionalArguments: '--scan ./', odcInstallation: 'DC'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        
        stage('Build') {
            steps {
                sh "mvn package -DskipTests=true"
            }
        }
        
        stage('Upload to nexus') {
            steps {
                withMaven(
                    mavenSettingsConfig: 'global-maven',
                    jdk: 'jdk17',
                    maven: 'maven3'
                ) {
                    sh "mvn deploy -DskipTests=true"
                }
            }
        }
        
        stage('Build Docker image') {
            steps {
                script {
                    docker.withRegistry('', 'docker-creds') {
                        sh "docker build -t ${DOCKER_IMAGE} ."
                    }
                }
            }
        }
        
        stage('Trivy Scan') {
            steps {
                sh "trivy image --exit-code 0 --severity CRITICAL ${DOCKER_IMAGE} > trivy-report.txt"
            }
        }
        
        stage('Push Docker image') {
            steps {
                script {
                    docker.withRegistry('', 'docker-creds') {
                        sh "docker push ${DOCKER_IMAGE}"
                    }
                }
            }
        }
        
        stage('K8s Deploy') {
            steps {
                withKubeConfig(
                    credentialsId: 'k8s-token',
                    serverUrl: 'https://172.31.27.68:6443',
                    namespace: 'webapps'
                ) {
                    sh "kubectl apply -f deploymentservice.yml"
                    sh "kubectl get pods -n webapps"
                }
            }
        }
    }
}